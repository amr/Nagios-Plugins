#! /bin/sh
#
# Free memory checker plugin for Nagios
# Written by Omar Abdel-Wahab (owahab@owahab.com)
# Last Modified: 09-25-2009
#
# Usage: ./check_mem
#
# Description:
#
# @TODO
#
# Output:
#
# @TODO
#
# Notes:
#
# @TODO
#
# Examples:
#
# @TODO
#

PROGNAME=`/usr/bin/basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION=`echo '$Revision: 1 $' | sed -e 's/[^0-9.]//g'`

. $PROGPATH/utils.sh

print_usage() {
    echo "Usage: $PROGNAME -s (percentage|bites) -w warning -c critical"
    echo "Usage: $PROGNAME --help"
    echo "Usage: $PROGNAME --version"
}

print_help() {
    print_revision $PROGNAME $REVISION
    echo ""
    print_usage
    echo ""
    echo "Free memory size checker plugin for Nagios"
    echo ""
}

format_size() {
	if [ "$1" -lt "1024" ]; then
		echo "$1 KB"
	else
		newsize=$(echo "$1/1024" | bc)
		echo "$newsize MB"
	fi

	return 0
}

calc_size() {
	realsize=$(echo $1 | sed -e 's/M/\*1024/g')
	echo "$realsize" | bc
	return 0
}

sed_mem() {
	TMP_RESULT=$(echo "$*" | sed -e "s/\([a-zA-Z]*\):\s*\([0-9]*\)\skB/\2/g")
	echo $TMP_RESULT
	return 0
}

# Make sure the correct number of command line
# arguments have been supplied

if [ $# -lt 1 ]; then
    print_usage
    exit $STATE_UNKNOWN
fi


# Set defaults
exitstatus=$STATE_UNKNOWN

# Grab the command line arguments
while test -n "$1"; do
    case "$1" in
        --help|-h)
            print_help
            exit $STATE_OK
            ;;
        --version|-V)
            print_revision $PROGNAME $REVISION
            exit $STATE_OK
            ;;
        --warning|-w)
            warning=$(calc_size $2)
            shift
            ;;
        --critical|-c)
            critical=$(calc_size $2)
            shift
            ;;
        --style|-s)
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done

total_memory=$(sed_mem `cat /proc/meminfo | grep "^MemTotal"`)
unallocated_memory=$(sed_mem `cat /proc/meminfo | grep "^MemFree"`)
cached_memory=$(sed_mem `cat /proc/meminfo | grep "^Cached"`)

free_memory=$(echo "(($unallocated_memory+$cached_memory)/$total_memory)*100" | bc -l | cut -d "." -f1)

size=$(format_size $total_memory)

if [ "$free_memory" -le "$critical" ]; then
	data="CRITICAL"
	exitstatus=$STATE_CRITICAL
elif [ "$free_memory" -le "$warning" ]; then
	data="WARNING"
	exitstatus=$STATE_WARNING
elif [ "$free_memory" -gt "$warning" ]; then
	data="OK"
	exitstatus=$STATE_OK
fi

echo "MEMORY $data: Free memory is about $free_memory%."

exit $exitstatus
